{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useLoadMoreOnScroll = props => {\n    let { fetchSize = 10, limit = 500, scroller, mode = 'error', minDelta = 25 } = props;\n    if (!scroller) throw new Error(`Cannot use useLoadMoreOnScroll without specifying a scroller. \\n scroller MUST be an HtmlDOMElement acquired via useRef() or React.ref()`)\n    let l = () => {};\n    if (mode === 'debug') {\n        l = console.log;\n    }\n    const [lastFetchSize, setLastFetchSize] = useState(fetchSize);\n    const [delta, setDelta] = useState(999);\n    const [scrollTop, setScrollTop] = useState(0);\n    const [scrollDirection, setScrollDirection] = useState('none');\n    const [doneFetching, setDoneFetching] = useState(false);\n    const [isFetching, setIsFetching] = useState(true);\n    const [hasScrollbar, setHasScrollbar] = useState(false);\n    const [initFetchCount, setInitFetchCount] = useState(0);\n    const [lastCount, setLastCount] = useState(0);\n    const [start, setStart] = useState(0);\n    const [end, setEnd] = useState(0);\n\n\n    useEffect(() => {\n        if (!isFetching &&\n            !hasScrollbar &&\n            lastCount !== initFetchCount &&\n            !doneFetching\n        ) {\n            l(`Trying to  make the scrollbar visible : ${initFetchCount}`);\n            setLastFetchSize(lastFetchSize + fetchSize);\n        }\n        setLastCount(initFetchCount);\n    }, [\n        initFetchCount,\n        isFetching,\n        hasScrollbar,\n        lastFetchSize,\n        fetchSize,\n        doneFetching\n    ]);\n\n    useEffect(() => {\n        if (!hasScrollbar && !isFetching) {\n            setInitFetchCount(initFetchCount + 1);\n        }\n    }, [isFetching, hasScrollbar]);\n\n    useEffect(() => {\n        const scrollElement = scroller.current;\n        setHasScrollbar(\n            scrollElement.scrollHeight > scrollElement.getBoundingClientRect().height\n        );\n    }, [isFetching]);\n\n    useEffect(() => {\n        const scrollElement = scroller.current;\n        let previousScroll = 0;\n        l(`scroll listener added to element`, scrollElement);\n        const scrollHandler = scrollElement.addEventListener(\"scroll\", e => {\n            setScrollTop(scrollElement.scrollTop);\n            if (previousScroll < scrollElement.scrollTop) {\n                setScrollDirection(\"down\");\n            } else {\n                setScrollDirection(\"up\");\n            }\n            previousScroll = scrollElement.scrollTop;\n        });\n        return () => {\n            l(`scroll listener removed from element`, scrollElement);\n            scrollElement.removeEventListener(\"scroll\", scrollHandler);\n        };\n    }, [scroller]);\n\n    useEffect(() => {\n        const scrollElement = scroller.current;\n        if (scrollDirection === \"down\") {\n            setDelta(scrollElement.scrollHeight - scrollElement.scrollTop - scrollElement.getBoundingClientRect().height);\n        }\n    }, [scrollTop, scrollDirection, isFetching]);\n\n    useEffect(() => {\n        l(`delta value ${delta} and scroll direction ${scrollDirection}`)\n        if (delta <= minDelta && !isFetching && !doneFetching) {\n            setLastFetchSize(lastFetchSize + fetchSize);\n        }\n    }, [delta, doneFetching]);\n\n    useEffect(() => {\n        if (lastFetchSize <= limit) {\n            if (lastFetchSize - fetchSize !== lastFetchSize) {\n                setStart(lastFetchSize - fetchSize);\n                setEnd(lastFetchSize);\n                l(`Requesting fetch for start ${start} end ${end}`);\n            }\n        } else if (\n            limit - lastFetchSize + fetchSize > 0 &&\n            limit - lastFetchSize <= fetchSize\n        ) {\n            setStart(lastFetchSize - fetchSize);\n            setEnd(limit);\n            l(`Requesting fetch for start ${start} end ${end}`);\n        } else {\n            l(`Reached max limit set ${limit}`)\n            setDoneFetching(true);\n        }\n    }, [lastFetchSize, limit, fetchSize]);\n    const forceDonefetching = () => {\n        l(`User requested stop fetching`);\n        setDoneFetching(true)\n    }\n    return {\n        start,\n        end,\n        isFetching,\n        doneFetching,\n        setIsFetching,\n        forceDonefetching\n    };\n};\n\nexport default useLoadMoreOnScroll;"],"names":["useLoadMoreOnScroll","props","fetchSize","limit","scroller","mode","minDelta","Error","l","console","log","useState","lastFetchSize","setLastFetchSize","delta","setDelta","scrollTop","setScrollTop","scrollDirection","setScrollDirection","doneFetching","setDoneFetching","isFetching","setIsFetching","hasScrollbar","setHasScrollbar","initFetchCount","setInitFetchCount","lastCount","setLastCount","start","setStart","end","setEnd","scrollElement","current","scrollHeight","getBoundingClientRect","height","previousScroll","scrollHandler","addEventListener","removeEventListener","forceDonefetching"],"mappings":"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"}